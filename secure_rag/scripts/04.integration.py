#!/usr/bin/env python3
from fastapi import FastAPI, HTTPException
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import SentenceTransformerEmbeddings
import os
import uvicorn # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç uvicorn

app = FastAPI()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = os.path.expanduser("~/secure_rag/vector_db")
# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
EMBEDDING_MODEL_PATH = os.path.expanduser("~/models/embeding/BAAI-bge-m3")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
db = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º db –∫–∞–∫ None
try:
    print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ): {EMBEDDING_MODEL_PATH}...")
    embeddings = SentenceTransformerEmbeddings(model_name=EMBEDDING_MODEL_PATH)
    
    print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∏–∑: {DB_PATH}...")
    db = FAISS.load_local(DB_PATH, embeddings, allow_dangerous_deserialization=True)
    print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –≥–æ—Ç–æ–≤–∞. –í–µ–∫—Ç–æ—Ä–æ–≤: {db.index.ntotal}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: {str(e)}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é '02.create_vector_db.py' –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞.")
    # db –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None, —á—Ç–æ –≤—ã–∑–æ–≤–µ—Ç HTTPException –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∏—Å–∫–∞

@app.get("/search")
async def search(query: str, k: int = 3):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç k –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤.
    """
    if db is None:
        raise HTTPException(status_code=500, detail="–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    
    try:
        print(f"üîé –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫: '{query}' (k={k})")
        results = db.similarity_search(query, k=k)
        
        formatted_results = []
        for doc in results:
            source_info = doc.metadata.get("source", "unknown")
            source_info = source_info.replace(os.path.expanduser("~/secure_rag/md/"), "") # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            formatted_results.append({
                "content": doc.page_content,
                "source": source_info
            })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return {
            "query": query,
            "results": formatted_results
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ RAG API —Å–µ—Ä–≤–µ—Ä–∞...")
    uvicorn.run(app, host="0.0.0.0", port=9000)

