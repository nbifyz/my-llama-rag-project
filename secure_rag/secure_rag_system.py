#!/usr/bin/env python3
# secure_rag_system.py - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â–µ–Ω–Ω–∞—è RAG-—Å–∏—Å—Ç–µ–º–∞ (–±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è)
import os
import sys
import yaml
import pickle
import numpy as np
import uvicorn
import time
import hashlib
from fastapi import FastAPI, HTTPException, Depends, Security, status
from fastapi.security import APIKeyHeader
from pydantic import BaseModel
from typing import List, Optional, Tuple
from langchain_community.document_loaders import DirectoryLoader, TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_ollama import OllamaEmbeddings
from langchain_community.vectorstores import FAISS
from rank_bm25 import BM25Okapi
from cryptography.fernet import Fernet

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ `your_user` –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Linux!)
CONFIG = {
    "documents_path": "/home/user/secure_rag/documents",
    "vector_db_path": "/home/user/secure_rag/vector_db",
    "embedding_model": "bge-m3:567m",  # –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    "chunk_size": 512,
    "chunk_overlap": 128,
    "host": "127.0.0.1",
    "port": 9000,
    "encrypt_content": False,  # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!
    "log_file": "/home/user/secure_rag/logs/rag_system.log"
}

# API Keys (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏!)
API_KEYS = {
    "client-app": "SECURE_RAG_ACCESS_KEY_123!",
    "admin": "MASTER_KEY_ADMIN_!#456"
}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class SearchResult(BaseModel):
    content: str
    source: str
    score: float
    is_encrypted: bool = False

class SearchRequest(BaseModel):
    query: str
    k: int = 3
    source_filter: Optional[str] = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Secure RAG API",
    description="RAG-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenWebUI",
    version="3.0"
)

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
api_key_header = APIKeyHeader(name="X-API-Key", auto_error=False)

def get_api_key(api_key: str = Security(api_key_header)):
    if api_key not in API_KEYS.values():
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API Key"
        )
    return api_key

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def load_and_index_documents(reindex: bool = False):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ (FAISS + BM25)"""
    if not reindex and os.path.exists(CONFIG['vector_db_path']):
        return
    
    print("‚öôÔ∏è –ù–∞—á–∞–ª–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    loader = DirectoryLoader(
        CONFIG['documents_path'],
        glob="**/*.md",
        loader_cls=TextLoader,
        show_progress=True
    )
    documents = loader.load()
    
    if not documents:
        raise RuntimeError("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    for doc in documents:
        doc.metadata = {
            "source": doc.metadata['source'],
            "hash": hashlib.sha256(doc.page_content.encode()).hexdigest(),
            "timestamp": time.time()
        }
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=CONFIG['chunk_size'],
        chunk_overlap=CONFIG['chunk_overlap'],
        separators=["\n\n", "\n", " ", ""]
    )
    chunks = splitter.split_documents(documents)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
    embeddings = OllamaEmbeddings(model=CONFIG['embedding_model'])
    vector_db = FAISS.from_documents(chunks, embeddings)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    os.makedirs(CONFIG['vector_db_path'], exist_ok=True)
    vector_db.save_local(CONFIG['vector_db_path'])
    
    # –ò–Ω–¥–µ–∫—Å BM25
    bm25_index = BM25Okapi([c.page_content for c in chunks])
    with open(os.path.join(CONFIG['vector_db_path'], "bm25_index.pkl"), "wb") as f:
        pickle.dump(bm25_index, f)
    
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {CONFIG['vector_db_path']}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
def startup_event():
    print("üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è...")
    load_and_index_documents(reindex=True)  # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å

# API Endpoints
@app.post("/search", response_model=List[SearchResult])
async def secure_search(
    request: SearchRequest,
    api_key: str = Security(get_api_key)
):
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π + BM25)"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ FAISS
        embeddings = OllamaEmbeddings(model=CONFIG['embedding_model'])
        vector_db = FAISS.load_local(
            CONFIG['vector_db_path'],
            embeddings,
            allow_dangerous_deserialization=True
        )
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        semantic_results = vector_db.similarity_search_with_score(
            request.query, 
            k=request.k * 2,
            filter={"source": request.source_filter} if request.source_filter else None
        )
        
        # BM25
        with open(os.path.join(CONFIG['vector_db_path'], "bm25_index.pkl"), "rb") as f:
            bm25_index = pickle.load(f)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        combined_results = []
        for doc, score in semantic_results:
            bm25_score = bm25_index.get_scores(request.query)[0]
            combined_score = (1 - score) * 0.7 + bm25_score * 0.3
            
            combined_results.append({
                "doc": doc,
                "score": combined_score,
                "content": doc.page_content  # –ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
            })
        
        # –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        combined_results.sort(key=lambda x: x['score'], reverse=True)
        return [SearchResult(
            content=r['content'][:1000],
            source=r['doc'].metadata['source'],
            score=r['score'],
            is_encrypted=False
        ) for r in combined_results[:request.k]]
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

@app.get("/health")
async def health_check():
    return {"status": "active", "model": CONFIG['embedding_model']}

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–° (—Ç–æ–ª—å–∫–æ Linux)
    if not sys.platform.startswith('linux'):
        print("‚õî –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Linux!")
        sys.exit(1)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ RAG-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {CONFIG['host']}:{CONFIG['port']}")
    print(f"üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ API-–∫–ª—é—á–∏: {list(API_KEYS.keys())}")
    
    uvicorn.run(
        app,
        host=CONFIG['host'],
        port=CONFIG['port'],
        log_config=None
    )
